### DAY 59: NOVEMBER 13, MONDAY, 2023 ()

** Today's PROGRESS**:


MORNING:
This morning we had a talk from an HR from an Economist about the importance of C.V. 
and what to include and not include within them. 
He recommended to look at the below website as an example of a portfolio on the web. 
https://www.emiliawil.dev/#about

LINK FROM TOM:
projects to work on
https://www.frontendmentor.io/home
LINK FROM SAMANTHA:
13 minutes of use effect in react
https://www.youtube.com/watch?v=0ZJgIjIuY7U&t=566s

AFTERNOON:
This afternoon we worked on a react repository (below is the link to it).
** THOUGHTS:**


** LINK TO WORK:
Today's repository to work with given. 
https://github.com/SchoolOfCode/bc15-w11-d1-workshop-use-effect-week11-team27.git

https://www.emiliawil.dev/#about

CODE EXAMPLES:
Counter Example (useEffect)
In this example, useEffect updates the document title every time the count state changes. 
The count variable is included in the dependency array to ensure that the effect runs only when 
count changes, not at every component render. 

import { useState, useEffect } from 'react';
​
export default function App() {
  const [count, setCount] = useState(0);
​
  useEffect(() => {
    // Updating the document title using useEffect
    document.title = `You clicked ${count} times`;
  }, [count]); // This effect depends on `count`
​
  return (
    <div>
      <h1>You clicked {count} times</h1>
      <button onClick={() => setCount(prevCount => prevCount + 1)}>
        Click me
      </button>
    </div>
  );
}
-----------------------------
Dad Jokes API Example (useEffect)
Here, useEffect is used for data fetching when the component first mounts, as indicated by the empty dependency array. 
The effect calls an 
asynchronous function fetchJoke to fetch a dad joke. Note that effects themselves cannot be asynchronous, which 
is why fetchJoke is defined and called inside the effect. (edited) 
import { useState, useEffect } from "react";
​
export default function App() {
  const [joke, setJoke] = useState("");
​
  async function fetchJoke() {
    try {
      const response = await fetch("https://icanhazdadjoke.com/", {
        headers: {
          Accept: "application/json"
        }
      });
			if (!response.ok) {
        throw Error(response.status);
      }
      const data = await response.json();
      setJoke(data.joke);
    } catch (error) {
      console.error("Error fetching joke:", error);
      setJoke("Failed to fetch a joke.");
    }
  }
​
  useEffect(() => {
    fetchJoke();
  }, []); // Runs once after the initial render
​
  return (
    <div>
      <h1>Dad Joke</h1>
      <p>{joke}</p>
      <button onClick={fetchJoke}>Fetch Another Joke</button>
    </div>
  );
}
-------------------------------------------
Infinite Loops
Be cautious with the dependencies array. An infinite loop can occur if the effect updates a dependency it depends on.

Homework/Bonus Task
Research why and when you’d need a cleanup function in a useEffect hook. 
Cleanup functions are essential in scenarios like unsubscribing from services, 
clearing timers, or removing event listeners to prevent 
memory leaks and other performance issues. Understanding the nuances of dependencies 
and cleanup is crucial for writing efficient and bug-free code.
