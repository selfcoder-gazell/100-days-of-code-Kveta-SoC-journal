### DAY 58: NOVEMBER 10, FRIDAY, 2023 ()

** Today's PROGRESS**:
Today we were given a hackathon to work on. Details below. 

MORNING:
MORNING TALKS:
by Julio Velezmoro:
https://roadmap.sh/

https://www.linkedin.com/in/juliovelezmoro/

https://github.com/lakorthus

** THOUGHTS:**


** LINK TO WORK:
FIGMA SHOPPING CART APPLICATION:
https://github.com/SchoolOfCode/bc15-w10-d5-hackathon-react-team24-w10
https://github.com/SchoolOfCode/bc15-w10-d5-hackathon-react-team24-w10-KVETA
FIGMA PLANNING:
https://www.figma.com/file/A2gB62QCXYVQqlEMK3I8Ve/Untitled?type=whiteboard&node-id=5-22&t=gDQQUUYOJyR78RHt-0


CLASSROOM LINK:

React SPA App Hackathon
Brief
Welcome to the React SPA (Single Page Application) App Hackathon! This challenge is a fantastic opportunity to harness your 
React skills and understanding of component-based architecture. Your mission, should you choose to accept it, is to plan, 
develop, and present a fully functioning React SPA of your choice. Focus on creating a detailed component tree, outlining 
where state and props will be managed in your application.

Objectives
Develop a React SPA with a clear component structure.
Demonstrate effective planning of state and props across components.
Implement a component-by-component development approach.
Deliver a functional MVP within a tight timeframe.
Development Rules
Work in pairs or threes, using the Driver-Navigator approach for coding. Make sure to switch roles regularly!
Make frequent, small commits to track and manage changes easily.
Plan before you code. Before coding, outline your component tree and specify the state and props for each component.
Think through the logic for each function, considering inputs, outputs, and logic.
Remember: The goal is to solve the problem before you even start coding in JavaScript/React/JSX. 
Think of the actual code as simply translating your well-thought-out plan into syntax the computer understands. 
Working this way will make the development process more organised. Good software development 
is as much about planning and understanding as it is about writing the code.

Technical Requirements
Programming Language: JavaScript (React.js).
Environment: Web Browser.
UI: JSX/React Components
Milestones
Initial Planning: Draft a comprehensive component tree. Identify components, their state, and props.
Develop Core Components: Focus on props, state, and JSX for each component.
Build Functionality: Implement functions with a clear understanding of inputs, outputs, and logic.
Stretch Goals, Testing & Debugging: Address any additional features and refine the application.
Evaluation Criteria
Teamwork: How effectively did the team collaborate?
Plan Quality: Detail and practicality of the component plan (state and props).
Code Quality: Cleanliness, formatting, and organisation.
Git Practices: Documentation of changes with clear, frequent commits.
Functionality: Does the SPA function as intended?
Completion: Are all core features and components implemented?
