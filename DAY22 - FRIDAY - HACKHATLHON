### DAY 22: SEPTEMBER 29, FRIDAY, 2023 ()

** Today's PROGRESS**:
TODAY'S SESSION WAS ALL ABOUT BUILDING A REST API - IN OUR HACKHATHLON TEAM OF TWO. 
MORNING:

AFTERNOON:
Build an API Hackathon
Brief
Welcome to the Build an API Hackathon! Over the past week, you've been learning how to build APIs, handle incoming requests, and serve a response. 
It's time to apply what you've learned. Your challenge is to design, develop, and demonstrate a fully functional API around a theme of your choice within 
a single day.

Objectives
Build a REST API around a resource of your choice.
Work in a team using the Driver-Navigator/pair programming approach.
Practice planning before jumping into coding.
Deliver an MVP within a tight timeframe.
Development Rules
Work in pairs or threes, using the Driver-Navigator approach for coding. Make sure to switch roles regularly!
Make frequent, small commits to track and manage changes easily.
Plan before you code. Write pseudocode as comments in your JavaScript file so it acts as a roadmap when you start to code. 
Break down each step and think through the logic.
Remember: The goal is to solve the problem before you even start coding in JavaScript. 
Think of the actual code as simply translating your well-thought-out plan into syntax the computer understands. 
Working this way will make the development process more organised. 
Good software development is as much about planning and understanding as it is about writing the code.

Technical Requirements
Programming Language: JavaScript
Environment: Node.js
UI: None (Thunder Client/API responses)
Data Source: JSON file
Unique Identifier: Each resource entry should have a unique identifier generated using the uuid package.
Response Specification: All JSON responses from your API should adhere to the JSend specification. 
This specification provides a consistent structure for your responses, making your API more predictable and easier to interact with.
HTTP method

Path

Request body (JSON)
Response body (JSON)
Status code
Description

GET - /resource - List of resources - Retrieve all resources

GET /resource/:id - A particular resource object - Retrieve a specific resource by its ID

POST - /resource - New resource object - Create a new resource

PATCH - /resource/:id - Edited resource object - Update the details of a specific resource

DELETE - /resource/:id - Remove a specific resource by its ID

Milestones
Planning out your API routes and resources. Create and complete your own requirements table first, similar to the one above.
Setting up a basic Express server with a test route, logging middleware and nodemon.
Implementing CRUD operations.
Testing the API using tools like Postman or Thunder Client.
Stretch Goals
The stretch goals below are optional, and feel free to come up with your own too.

Advanced Routing with Query Parameters
Search: Add a search feature on the /resource endpoint. For instance, /resource?name=ResourceName could return resources with names matching the query.
Sorting: Allow sorting of resources. For instance, /resource?sort=name could return resources sorted alphabetically by name.
Error Handling and Responses
If a resource with a specific ID isn't found, return a 404 Not Found status code along with a clear error message.
For other errors, such as server errors or bad request data, return appropriate status codes like 500 Internal Server Error or 400 Bad Request with clarifying error messages.
Implement middleware for error handling in your Express server.
In a separate repository, create a frontend for your API and use a UI and fetch to interact with it.
Presentation Guidelines
Prepare a 4-minute end-of-day demo.
Each team will present to a coach.
Each team member must participate in the presentation.
Evaluation Criteria
Teamwork: How well did the team work together? What worked well? What would you change for next time?
Presentation: Was the presentation clear, concise, and kept on time?
Plan Quality: How well was the project planned out? Did they create and follow a requirements table for their chosen resource?
Code Quality: Is the code clean, formatted and organised?
Git Practices: Were changes documented with frequent, clear commits?
Functionality: Does the API work as intended, and is it RESTful?
Completion: Are all required features implemented?

** THOUGHTS:**
This was very challenging - especially since it was only two of us. 
** LINK TO WORK:
HACKHATHLON BRIEF:
https://docs.google.com/document/d/e/2PACX-1vSaEyO3vCUngYdlty7BZNcFDUzi95TeHquVije_pNXuE7YGv3sijA5rjm_9gWZbL98zdJ8Sz77w5icC/pub
git link to HACKHATHLON;
https://github.com/SchoolOfCode/bc15-w4-d5-hackathon-backend-team29-w4

