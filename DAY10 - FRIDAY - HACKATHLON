### DAY 10: SEPTEMBER 15, FRIDAY, 2023 ()

** Today's PROGRESS**:


MORNING:



** THOUGHTS:**


** LINK TO WORK:
LINK TO THE HACKATHON;
https://github.com/SchoolOfCode/bc15-w2-d5-hackathon-rps-game-team-30-week-2

https://docs.google.com/document/d/e/2PACX-1vRIWSm_VgHGDOxflgp7Q8UNUUT8T-llgzd7i7ylFhcRQzFfZ8NVFqhtkrrHnpPzWNM-tO_qBg6S69H0/pub

BRIEF;
Rock-Paper-Scissors Hackathon
Brief
Welcome to the Rock-Paper-Scissors Hackathon! You've spent the last two weeks learning computational thinking, the developer mindset, and JavaScript fundamentals. Now, let's put those skills to the test. Your challenge is not easy: plan, build, and present a Rock-Paper-Scissors game in a single day.

Objectives
Test your understanding of JavaScript fundamentals.
Work in a team using the Driver-Navigator/pair programming approach.
Practise planning before jumping into coding.
Deliver an MVP within a tight timeframe.
Development Rules
Work in pairs or trios, using the Driver-Navigator approach for coding. Make sure to switch roles regularly!
Make frequent, small commits to track and manage changes easily.
Use draw.io (or a similar tool) to create a flowchart that maps out the logic of your game. Consider all possible user interactions, game states, and outcomes.
Translate your flowchart into pseudocode. Write the pseudocode as comments in your JavaScript file so it acts as a roadmap when you start to code. Break down each step and think through the logic.
Remember: The goal is to solve the problem before you even start coding in JavaScript. Think of the actual code as simply translating your well-thought-out plan into syntax the computer understands. Working this way will make the development process more organised. Good software development is as much about planning and understanding as it is about writing the code.

Technical Requirements
Programming Language: JavaScript
Environment: Browser/Console
UI: Use alert, prompt, confirm and console.log for interactions. (Find out more)
Milestones
Planning and Initial Setup
Implement Two-Player Mode
Implement Score Keeping
Create Computer Opponent Mode (using Math.random)
Stretch Goals, Testing & Debugging
Stretch Goals
Include a game history feature
Validate user input to handle invalid or unexpected entries
Implement "Best of" modes (e.g., Best of 3, Best of 5)
Presentation Guidelines
Prepare a 4-minute end-of-day demo.
Each team will present to a coach.
Each team member must participate in the presentation.
Evaluation Criteria
Teamwork: How well did the team work together?
Presentation: Was the presentation clear, concise, and kept on time?
Plan Quality: How well was the project planned out?
Code Quality: Is the code clean and organised?
Git Practices: Were changes documented with frequent, clear commits?
Functionality: Does the game work as intended?
Completion: Are all required features implemented?
