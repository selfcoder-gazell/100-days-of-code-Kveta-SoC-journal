### DAY 57: NOVEMBER 9, THURSDAY, 2023 ()

** Today's PROGRESS**:

Here are a few stretch goal ideas for the React Flashcards app:
When there are no flashcards, show a message to the user like "You haven't added any flashcards yet! 
Start creating your learning set."
Above the footer, we can display a count of how many flashcards have been added. Something like 
"You have added [x] flashcards" would be great. (Adding derived state)
Add functionality that allows the user to change/edit the question and answer on any card.
Allow the user to add a category to each flashcard (difficulty or subject) and then implement 
sorting or filtering options.
Remember, these are stretch goals, so let's focus on getting our core functionality perfect first and then 
tackle these as we can. Also, feel free to come up with your own and improve the app as you see fit. (


MORNING:


** THOUGHTS:**


** LINK TO WORK:

import { useState } from "react";
import "./App.css";

// React: Building UIs

// Component:
//    - Reusable piece of the UI
//    - Functions starts with a capital letter
//    - Return some JSX (or anything that React can render)

// JSX: Language for expressing UIs

// Props:
//    Input to a component
//    Passed from parent to child in key={value} pairs
//    Child can then extract them from the props object.

// State:
//    React variable -> Remember / keeping track of things
//    "reactive" -> when you change the information, the UI updates (to keep in sync with the new changes)

// useState:
//    helpful for creating state
//    returns an array contains 2 things:
//      current value of that reactive variable
//      a way to change that reactive variable

function App() {
  // create some state to keep track of the count
  // 'reactive'
  // destructuring arrays in JS
  // destructuring assignments
  const [count, setCount] = useState(0);

  console.log("App has rendered");

  function incrementCount() {
    // changing state triggers a rerender
    // rerender -> React will call the component function
    setCount(prev => prev + 1);
  }

  // Change the count when a button is clicked
  //    Create a button
  //    Event listener on the button
  //    when the button is clicked, increment the value
  //    Can skip with React: Update the DOM manually to reflect the incremented value

  return (
    <main>
      <button onClick={incrementCount}>Click me to increment</button>
      {count}
    </main>
  );
}

export default App;


CLASSROOM LINK:
https://github.com/SchoolOfCode/bc15-w10-d2-workshop-react-flash-cards-app-team24-w10

